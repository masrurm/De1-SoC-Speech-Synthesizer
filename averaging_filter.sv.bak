module averaging_filter (clk, audio_data, LED, start, done);

input clk;
input [7:0] audio_data;
input start;
output [7:0] LED;
output done;

reg [8:0] counter = 8'b0;		//
reg [8:0] val;					//
reg [16:0] sum = 16'b0; 		// 

reg [3:0] state;

parameter idle 				= 4'b000_0;
parameter check_negative	= 4'b001_0;
parameter absolute_value	= 4'b010_0;
parameter check_counter		= 4'b100_0;
parameter output_led		= 4'b101_0;
parameter finished			= 4'b110_1;

assign done = state[0];

always @(posedge clk) begin
	case(state)
	
	idle: begin
		if (start) 
			state <= check_negative
		else
			state <= idle;
	end
	
	check_negative: begin
		if(audio_data[7] == 1'b1)
			state <= absolute_value
		else
			val <= audio_data
			state <= check_counter;
	end
	
	absolute_value:	
		val <= audio_data^(8'b1000_0000);
		val <= val + 1'b1;
		state <= check_counter;
	
	check_counter: begin
		// if counter < 256, then add to sum and loop
		if (counter < 8'd256) begin
			counter <= counter + 8'd1;
			sum <= sum + val;
			state <= finished;
		else
			state <= output_led;
	end
	
	output_led: begin
		// divide by 256 (right shift 8 bits)
		sum <= sum >> 8;
		// priority encoder to light up LEDs
		if (sum[7] == 1) 
			LED <= 8'b1111_1111;
		else if (sum[6] == 1) 
			LED <= 8'b1111_1110;
		else if (sum[5] == 1)
			LED <= 8'b1111_1100;
		else if (sum[4] == 1)
			LED <= 8'b1111_1000;		
		else if (sum[3] == 1)
			LED <= 8'b1110_0000;
		else if (sum[2] == 1)
			LED <= 8'b1100_0000;
		else if (sum[1] == 1)
			LED <= 8'b1000_0000;
		else
			LED <= 8'b0000_0000;
		
		state <= finished;
	end
	
	finished: 
		state <= idle;
	
end

endmodule

